@model VocabularyViewModel

@{
    ViewData["Title"] = "Add a new vocabulary";
}

<h5 class="text-primary">Add a new vocabulary</h5>
<form asp-action="Create" method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="form-row">
        <div class="form-group col-9 col-lg-5">
            <label asp-for="Words" class="control-label"></label>
            <input asp-for="Words" class="form-control" />
            <span asp-validation-for="Words" class="text-danger"></span>
        </div>
        <div class="form-group col-3 col-lg-2">
            <label asp-for="Type" class="control-label"></label>
            <select asp-for="Type" class="form-control" asp-items="Html.GetEnumSelectList<VocabularyType>()">
                <option></option>
            </select>
            <span asp-validation-for="Type" class="text-danger"></span>
        </div>
    </div>
    @for (int i = 0; i < Model.Variations.Count; i++)
    {
        <div class="form-row variation">
            <div class="form-group col col-lg-5">
                @{
                    string variationId = null;
                    if (i == 0)
                    {
                        variationId = "variation0";
                        <label for="@variationId" class="control-label">Variation</label>
                    }
                }
                <input asp-for="Variations[i].Words" class="form-control" id="@variationId" />
            </div>
            <div class="form-group col-3 col-lg-2">
                @{
                    string variationTypeId = null;
                    if (i == 0)
                    {
                        variationTypeId = "variationType0";
                        <label for="@variationTypeId" class="control-label">Variation Type</label>
                    }
                }
                <select class="form-control" asp-for="Variations[i].Type" asp-items="Html.GetEnumSelectList<VocabularyType>()" id="@variationTypeId">
                    <option></option>
                </select>
            </div>
            <div class="form-group col-auto align-self-end">
                <button type="button" class="btn btn-secondary">+/-</button>
            </div>
        </div>
    }
    <div class="form-group">
        <label asp-for="Definition.ContentEn" class="control-label"></label>
        <textarea asp-for="Definition.ContentEn" class="form-control"></textarea>
        <span asp-validation-for="Definition.ContentEn" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Definition.ContentVi" class="control-label"></label>
        <textarea asp-for="Definition.ContentVi" class="form-control"></textarea>
        <span asp-validation-for="Definition.ContentVi" class="text-danger"></span>
    </div>
    @for (int i = 0; i < Model.Examples.Count; i++)
    {
        <div class="form-row example">
            <div class="form-group col">
                @if (i == 0)
                {
                    <label for="example0" class="control-label">Example</label>
                    <textarea asp-for="Examples[i].Example" class="form-control" id="example0"></textarea>
                }
                else
                {
                    <textarea asp-for="Examples[i].Example" class="form-control"></textarea>
                }
            </div>
            <div class="form-group col-auto align-self-end">
                <button type="button" class="btn btn-secondary">+/-</button>
            </div>
        </div>
    }
    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(function () {
            configEditor("variation");
            configEditor("example");
        });
    </script>
}